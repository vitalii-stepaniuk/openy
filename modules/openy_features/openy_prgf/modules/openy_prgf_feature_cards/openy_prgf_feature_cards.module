<?php

use Drupal\Core\Url;


/**
 * Implements hook_preprocess_paragraph
 * @param $variables
 */
function field_prgf_feature_cards_preprocess_paragraph(&$variables) {

  $paragraph = $variables['paragraph'];
  $type = $paragraph->getType();

  // Main feature container template variables
  if($type == 'features') {
    $variables['#attached']['library'][] = 'field_prgf_feature_cards/feature-js';

    // Determine whether this feature hsa an overlay.
    $overlay_class = "";
    $overlay_field = $paragraph->get('field_feature_overlay');
    if (!$overlay_field->isEmpty() && !\Drupal::currentUser()->isAuthenticated()) {
      $overlay_class = 'overlay-' . $overlay_field->value;
    }

    $variables['overlay_class'] = $overlay_class;

    // Determine whether squares should have more rounded borders.
    if ($paragraph->get('field_features_more_rnd_edges')->value) {
      $variables['more_rounded'] = TRUE;
    }
  }

  // Individual feature cards
  if($type == 'feature_square') {
    // Figure out the columns in this feature so we can boostrap class it.
    $bootstrap_class = "col-xs-12 col-sm-12 col-lg-4 col-md-6";
    // Put our classes in the template.
    $variables['bootstrap_classes'] = $bootstrap_class;

    // Place the title above or below the image
    // and provide a class for styling.
    $title_placement = $paragraph->get('field_feature_title_option')->value;
    if(empty($title_placement)) {
      $title_placement = 'none';
    }

    $variables['title_placement'] = $title_placement;
    $variables['title_class'] = 'place-title-' . $title_placement;

    // Determine where to place our link, on the button,
    // on the content or both.
    $placement = $paragraph->get('field_feature_button_option')->value;
    $variables['link_placement'] = $placement;

    $variables['card_url'] = "";

    if ($placement == 'content' || $placement == 'both') {
      if (!$paragraph->get('field_feature_square_cta')->isEmpty()) {
        // Grab the url so we can place it around text if necessary.
        $info = $paragraph->get('field_feature_square_cta')
          ->getValue()['0'];

        // Set the title to link instead of the button.
        $variables['content']['field_feature_square_title'][0] = [
          '#type' => 'link',
          '#title' => $paragraph->get('field_feature_square_title')->value,
          '#url' => Url::fromUri($info['uri']),
        ];
      }
    }
    else {
      if ($placement == 'full_card' && !$paragraph->get('field_feature_square_cta')->isEmpty()) {
        // Grab the url so we can place it around text if necessary.
        $info = $paragraph->get('field_feature_square_cta')
          ->getValue()['0'];
        if (isset($info['uri']) && is_string($info['uri'])) {
          $url = Url::fromUri($info['uri']);
          $variables['card_url'] = file_create_url($url->toString());
        }
      }
    }

    $variables['has_button'] = 'no-button';
    // Add some classes so we can style/hid things accordingly.
    if ($placement == 'show' || $placement == 'button') {
      $variables['link_class'] = 'link-button';
      $variables['has_button'] = 'has-button';
    }
    elseif ($placement == 'both') {
      $variables['link_class'] = 'link-button link-title';
      $variables['has_button'] = 'has-button';
    }
    elseif ($placement == 'content') {
      $variables['link_class'] = 'hide-button link-title';
    }
    elseif ($placement == 'full_card') {
      $variables['link_class'] = 'hide-button link-card';
    }
    else {
      // Default to no linking.
      $variables['link_class'] = 'hide-button';
    }


    //Image size class
    if($paragraph->hasField('field_feature_image_style')) {
      $style = $paragraph->get('field_feature_image_style')->value;
      if($style == 'full_width') {
        $variables['image_size_class'] = 'full-width-image';
      }
    }

    if($paragraph->hasField('field_feature_square_image') &&
      empty($paragraph->get('field_feature_square_image')->target_id)) {
      $variables['image_size_class'] = 'no-image';

    }


    // Get the card background color class
    $background_style = field_prgf_feature_cards_get_color_from_field('field_feature_card_background', $paragraph);
    if(empty($background_style)) {
      $background_style = '#FFFFFF';
    }

    // Assign the button color classes
    if($paragraph->hasField('field_feature_button_color')) {
      $field = $paragraph->get('field_feature_button_color');
      $button_class = 'color-' . $field->value;
    }

    // Make sure we have a default value
    if(empty($button_class)) {
      $button_class = 'color-purple';
    }

    // Handle the class for our button style
    if($paragraph->hasField('field_feature_card_button_style')) {
      $style = $paragraph->get('field_feature_card_button_style')->value;
      // Default to a fill-color
      if($style == 'color_fill' || empty($style)) {
        $button_class .= ' fill-color';
      }
      else  if($style == 'outline') {
        $button_class .= ' outline-color';
      }
    }

    $theme_class = 'theme-light';
    if($paragraph->hasField('field_card_theme')) {
      $theme_class = 'theme-' . $paragraph->get('field_card_theme')->value;
    }

    $variables['background_style'] = $background_style;
    $variables['button_class'] = $button_class;
    $variables['theme_class'] = $theme_class;
  }
}

/**
 * Helper function to get the color from the feature card taxonomy field.
 * @param $field_name
 * @param $paragraph
 * @return string
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function field_prgf_feature_cards_get_color_from_field($field_name, $paragraph) {
  $color_class = "";

  // Assign the button color classes
  if($paragraph->hasField($field_name)) {
    $field = $paragraph->get($field_name);

    if(!empty($field->target_id)) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($field->target_id);
      if ($term->hasField('field_color')) {
        $color_class = $term->get('field_color')->value;
      }
    }
  }

  return '#' . $color_class;
}
