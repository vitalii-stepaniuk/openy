{##}
{#/**#}
 {#* @file#}
 {#* Default theme implementation to display a paragraph.#}
 {#*#}
 {#* Available variables:#}
 {#* - paragraph: Full paragraph entity.#}
 {#*   - id: The paragraph ID.#}
 {#*   - bundle: The type of the paragraph, for example, "image" or "text".#}
 {#*   - authorid: The user ID of the paragraph author.#}
 {#*   - createdtime: Formatted creation date. Preprocess functions can#}
 {#*     reformat it by calling format_date() with the desired parameters on#}
 {#*     $variables['paragraph']->getCreatedTime().#}
 {#* - content: All paragraph items. Use {{ content }} to print them all,#}
 {#*   or print a subset such as {{ content.field_example }}. Use#}
 {#*   {{ content|without('field_example') }} to temporarily suppress the printing#}
 {#*   of a given child element.#}
 {#* - attributes: HTML attributes for the containing element.#}
 {#*   The attributes.class element may contain one or more of the following#}
 {#*   classes:#}
 {#*   - paragraphs: The current template type (also known as a "theming hook").#}
 {#*   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an#}
 {#*     "Image" it would result in "paragraphs--type--image". Note that the machine#}
 {#*     name will often be in a short form of the human readable label.#}
 {#*   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a#}
 {#*     preview would result in: "paragraphs--view-mode--preview", and#}
 {#*     default: "paragraphs--view-mode--default".#}
 {#* - view_mode: View mode; for example, "preview" or "full".#}
 {#* - logged_in: Flag for authenticated user status. Will be true when the#}
 {#*   current user is a logged-in member.#}
 {#* - is_admin: Flag for admin user status. Will be true when the current user#}
 {#*   is an administrator.#}
 {#*#}
 {#* @see template_preprocess_paragraph()#}
 {#*#}
 {#* @ingroup themeable#}
 {#*/#}
{##}

{% if content.paragraph_background %}
  {{ content.paragraph_background }}
{% endif %}

<div {{ attributes }} class="paragraph features-paragraph {{ overlay_class }}">
  <div class="features-paragraph-container container {% if more_rounded %}more-rounded{% endif %}">

    {% if (content.field_features_title.0 is not empty) or (content.field_feature_sub_heading.0 is not empty) %}
    <div class="features-heading">
      {% if content.field_features_title.0 is not empty %}
        <h1 class="feature-heading">{{ content.field_features_title }}</h1>
      {% endif %}

      {% if content.field_feature_sub_heading.0 is not empty %}
      <div class="sub-heading">
        {{ content.field_feature_sub_heading }}
      </div>
      {% endif %}
    </div>
    {% endif %}

    <div class="row">
      {{ content.field_feature_square }}
      <div class="clearfix"></div>
    </div>

    {% if not paragraph.field_feature_cta_link.isEmpty() %}
      <div class="row justify-content-center">
        <div class="features-cta-button">{{ content.field_feature_cta_link }}</div>
      </div>
    {% endif %}

    <div class="clearfix"></div>
  </div>
</div>
